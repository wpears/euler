function primeFact(num){
  var curr=0;
  var facts=[];
  var rem=num;
  while (rem !== 1){
    var prime = primes[curr];
    if(rem%prime===0){
      rem/=prime;
      facts.push(prime);
    }else{
      curr++;
    }
  }
  return facts;
}

function factShrink(arr){
  var a=arr[0];
  var tot=1;
  for(var i=0;i<arr.length;i++){
    tot*=arr[i];
  }
  return a+','+tot
}


function sieve(n){
	if(n>Math.pow(2,32)-1)throw new Error("N too large. Must fit in 32bits.")
	var arr=new Array(n),i=2,primes=[];
	while(i<=n){
		if(!arr[i]){
			primes[primes.length]=i;
			for(var j=i*2;j<=n;j+=i){
				arr[j]=1;
			}
		}
		i++;
	}
	return primes;
}

/*function bigPow(b,p){
console.log("calling bp",b,p)
  var start = 1;
  var tot = b;
  if(p>2) return bigPow(bigPow(b,p/2),2) 
  while (start < p){
    console.log('in while',tot,b)
    tot = bigMult(tot,b)
    start++;
  }
  return tot;
}*/

function bigPowMult(b,p){
  var start = 1;
  var tot = b;
  while (start < p){
    tot = bigMult(tot,b)
    start++;
  }
  return tot;
}


function bigMult(x,y){
  x = x.toString();
  y = y.toString()
  var toAdd =[];
  var offset = '';
  for(var i = y.length-1;i>=0;i--){
   var currY = y[i];
   var digRes = '';
   var carry = 0;
   for(var j = x.length-1;j>=0;j--){
     var currX = x[j];
     var currProd = currX*currY + carry;
     digRes = currProd%10 +digRes;
     carry = currProd/10 >>0
   }
   if(carry)digRes = carry + digRes;
   toAdd.push(digRes+offset);
   offset +='0'
  }
  return toAdd.reduce(bigAdd)
}

function bigAdd(a,b){
  a = a.toString();
  b = b.toString()
  var res = '';
  var carry = 0;
  var ai = a.length-1;
  var bi = b.length-1;
  while(ai>=0&&bi>=0){
    var curr = +a[ai] + +b[bi] + carry;
    var digit = curr%10;
    if (curr > 9){
      carry = 1
    }else carry = 0;
    res = digit + res;
    ai--;
    bi--;
  }
  var rem = a.slice(0,ai+1) + b.slice(0,bi+1);
  if(carry) rem = bigAdd(rem,carry.toString())
  return res = rem + res;
}

var res={};
for(var i=2;i<=100;i++){
console.log(i);
  for(var j=2;j<=100;j++){
    res[bigPowMult(i,j)]=1;
  }
}


console.log(Object.keys(res).length);

//python len({i**j for i in range(2,101) for j in range(2,101)})
